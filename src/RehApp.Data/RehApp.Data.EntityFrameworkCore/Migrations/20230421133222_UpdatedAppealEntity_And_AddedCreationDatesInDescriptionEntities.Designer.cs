// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RehApp.Data.EntityFrameworkCore;

#nullable disable

namespace RehApp.Data.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230421133222_UpdatedAppealEntity_And_AddedCreationDatesInDescriptionEntities")]
    partial class UpdatedAppealEntityAndAddedCreationDatesInDescriptionEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.Appeal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Appeals");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.AppealDesc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DescriptionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DescriptionValueId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionTypeId");

                    b.HasIndex("DescriptionValueId");

                    b.HasIndex("ParentId");

                    b.ToTable("AppealsDesc");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Blocked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.ApplicationUserDesc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DescriptionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DescriptionValueId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionTypeId");

                    b.HasIndex("DescriptionValueId");

                    b.HasIndex("ParentId");

                    b.ToTable("ApplicationUsersDesc");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.DescriptionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Code")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DescriptionTypes");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.DescriptionValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DescriptionTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionTypeId");

                    b.ToTable("DescriptionValues");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.Diary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Diaries");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.DiaryDesc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DescriptionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DescriptionValueId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionTypeId");

                    b.HasIndex("DescriptionValueId");

                    b.HasIndex("ParentId");

                    b.ToTable("DiariesDesc");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.DiaryEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DiaryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("Pulse")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TrainingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("DiaryEntries");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.ExerciseDesc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DescriptionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DescriptionValueId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionTypeId");

                    b.HasIndex("DescriptionValueId");

                    b.HasIndex("ParentId");

                    b.ToTable("ExercisesDesc");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.ExerciseHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ExercisesHistory");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.ExerciseParams", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrainingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ExercisesParams");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.ExerciseParamsDesc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DescriptionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DescriptionValueId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionTypeId");

                    b.HasIndex("DescriptionValueId");

                    b.HasIndex("ParentId");

                    b.ToTable("ExercisesParamsDesc");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.ExerciseParamsHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ExerciseParamsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ExercisesParamsHistory");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.ExtAuthInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ExtAuthInfos");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecialistId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TransferAllowed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SpecialistId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Viewed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.Observation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecialistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Observations");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.PostDesc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DescriptionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DescriptionValueId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionTypeId");

                    b.HasIndex("DescriptionValueId");

                    b.HasIndex("ParentId");

                    b.ToTable("PostsDesc");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Evaluation")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SpecialistId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("SpecialistId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.ReviewDesc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DescriptionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DescriptionValueId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionTypeId");

                    b.HasIndex("DescriptionValueId");

                    b.HasIndex("ParentId");

                    b.ToTable("ReviewsDesc");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DiaryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SpecialistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.TrainingHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TrainingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("TrainingsHistory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.Appeal", b =>
                {
                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.AppealDesc", b =>
                {
                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.DescriptionType", "DescriptionType")
                        .WithMany()
                        .HasForeignKey("DescriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.DescriptionValue", "DescriptionValue")
                        .WithMany()
                        .HasForeignKey("DescriptionValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.Appeal", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DescriptionType");

                    b.Navigation("DescriptionValue");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.ApplicationUser", b =>
                {
                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.ApplicationUserDesc", b =>
                {
                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.DescriptionType", "DescriptionType")
                        .WithMany()
                        .HasForeignKey("DescriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.DescriptionValue", "DescriptionValue")
                        .WithMany()
                        .HasForeignKey("DescriptionValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.ApplicationUser", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DescriptionType");

                    b.Navigation("DescriptionValue");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.DescriptionValue", b =>
                {
                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.DescriptionType", "DescriptionType")
                        .WithMany()
                        .HasForeignKey("DescriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DescriptionType");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.Diary", b =>
                {
                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.DiaryDesc", b =>
                {
                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.DescriptionType", "DescriptionType")
                        .WithMany()
                        .HasForeignKey("DescriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.DescriptionValue", "DescriptionValue")
                        .WithMany()
                        .HasForeignKey("DescriptionValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.Diary", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DescriptionType");

                    b.Navigation("DescriptionValue");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.DiaryEntry", b =>
                {
                    b.OwnsOne("RehApp.Domain.RelationalDatabase.ValueObjects.Pressure", "Pressure", b1 =>
                        {
                            b1.Property<Guid>("DiaryEntryId")
                                .HasColumnType("uuid");

                            b1.Property<int>("LowerBloodPressure")
                                .HasColumnType("integer");

                            b1.Property<int>("UpperBloodPressure")
                                .HasColumnType("integer");

                            b1.HasKey("DiaryEntryId");

                            b1.ToTable("DiaryEntries");

                            b1.WithOwner()
                                .HasForeignKey("DiaryEntryId");
                        });

                    b.Navigation("Pressure")
                        .IsRequired();
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.ExerciseDesc", b =>
                {
                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.DescriptionType", "DescriptionType")
                        .WithMany()
                        .HasForeignKey("DescriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.DescriptionValue", "DescriptionValue")
                        .WithMany()
                        .HasForeignKey("DescriptionValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.Exercise", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DescriptionType");

                    b.Navigation("DescriptionValue");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.ExerciseParamsDesc", b =>
                {
                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.DescriptionType", "DescriptionType")
                        .WithMany()
                        .HasForeignKey("DescriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.DescriptionValue", "DescriptionValue")
                        .WithMany()
                        .HasForeignKey("DescriptionValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.ExerciseParams", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DescriptionType");

                    b.Navigation("DescriptionValue");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.ExtAuthInfo", b =>
                {
                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.ApplicationUser", null)
                        .WithMany("ExtAuthInfo")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.Invitation", b =>
                {
                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.ApplicationUser", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.Note", b =>
                {
                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.ApplicationUser", "Specialist")
                        .WithMany()
                        .HasForeignKey("SpecialistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Specialist");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.Post", b =>
                {
                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.PostDesc", b =>
                {
                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.DescriptionType", "DescriptionType")
                        .WithMany()
                        .HasForeignKey("DescriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.DescriptionValue", "DescriptionValue")
                        .WithMany()
                        .HasForeignKey("DescriptionValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.Post", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DescriptionType");

                    b.Navigation("DescriptionValue");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.Review", b =>
                {
                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.ApplicationUser", "Specialist")
                        .WithMany()
                        .HasForeignKey("SpecialistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Specialist");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.ReviewDesc", b =>
                {
                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.DescriptionType", "DescriptionType")
                        .WithMany()
                        .HasForeignKey("DescriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.DescriptionValue", "DescriptionValue")
                        .WithMany()
                        .HasForeignKey("DescriptionValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehApp.Domain.RelationalDatabase.Entities.Review", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DescriptionType");

                    b.Navigation("DescriptionValue");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("RehApp.Domain.RelationalDatabase.Entities.ApplicationUser", b =>
                {
                    b.Navigation("ExtAuthInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
